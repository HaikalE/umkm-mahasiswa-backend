name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: umkm_mahasiswa_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create test environment file
      run: |
        cp .env.example .env.test
        sed -i 's/umkm_mahasiswa_db/umkm_mahasiswa_db_test/g' .env.test
        sed -i 's/NODE_ENV=development/NODE_ENV=test/g' .env.test
        sed -i 's/DB_PASSWORD=your_password/DB_PASSWORD=postgres/g' .env.test
    
    - name: Run linting
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
          npx eslint src/ --ext .js
        else
          echo "ESLint not configured, skipping..."
        fi
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: umkm_mahasiswa_db_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret
    
    - name: Generate test coverage
      run: |
        if npm list --depth=0 | grep -q "jest"; then
          npm run test:coverage || jest --coverage
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '18.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t umkm-mahasiswa-backend:latest .
        docker build -f Dockerfile.prod -t umkm-mahasiswa-backend:prod .
    
    - name: Test Docker image
      run: |
        docker run --rm umkm-mahasiswa-backend:latest node -e "console.log('Docker build successful')"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your deployment commands here
        # Example: SSH to server and pull latest changes
    
    - name: Health check
      run: |
        echo "üè• Running health checks..."
        # Add health check commands here
    
    - name: Notify success
      if: success()
      run: |
        echo "‚úÖ Deployment successful!"
        # Add notification logic (Slack, Discord, etc.)
    
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        # Add failure notification logic